module elevator_controller (
    input  logic       clk,
    input  logic       reset,
    input  logic [1:0] req,
    output logic [1:0] current_floor,
    output logic       moving,
    output logic       door_open
);

       typedef enum logic [2:0] {
        IDLE        = 3'b000,
        MOVING_UP   = 3'b001,
        MOVING_DOWN = 3'b010,
        OPEN_DOOR   = 3'b011,
        CLOSE_DOOR  = 3'b100
    } state_t;

    state_t state, next_state;
    logic [1:0] next_floor;

       always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            current_floor <= 2'b00;
        end else begin
            state <= next_state;

            if (state == MOVING_UP)
                current_floor <= current_floor + 1;
            else if (state == MOVING_DOWN)
                current_floor <= current_floor - 1;
        end
    end

        always_comb begin
        next_state = state;
        next_floor = current_floor;
        moving = 0;
        door_open = 0;

        case (state)

            IDLE: begin
                if (req > current_floor)
                    next_state = MOVING_UP;
                else if (req < current_floor)
                    next_state = MOVING_DOWN;
                else if (req == current_floor)
                    next_state = OPEN_DOOR;
            end

            MOVING_UP: begin
                moving = 1;
                if (current_floor == req)
                    next_state = OPEN_DOOR;
            end

            MOVING_DOWN: begin
                moving = 1;
                if (current_floor == req)
                    next_state = OPEN_DOOR;
            end

            OPEN_DOOR: begin
                door_open = 1;
                next_state = CLOSE_DOOR;
            end

            CLOSE_DOOR: begin
                door_open = 0;
                next_state = IDLE;
            end

            default: begin
                next_state = IDLE;
            end

        endcase
    end

endmodule
